#!/bin/sh
yabdialog --colorcontrol boring
#always start by resetting to default color. If yabdialog crashed last time, the color might be unstable.
yabdialog --about
alert "Welcome to the yabdialog demo. Please close or minimize all windows on this desktop, then press OK" OK
yabdialog -s -q0 -b1 "what you saw up to now was Haiku's own alert command. It's great, but yabdialog can do more"
name=`yabdialog -t -q0 -b1 "What is your name?"`
yabdialog -s -q0 -b1 "Nice to meet you, $name!"
yabdialog -s -q1 -b1 "You can place a widget at any of five precalculated positions"
yabdialog -s -q2 -b0 "You can use a different style of button text"
yabdialog -s -q3 -b2\:\) "Or you can invent your own"
yabdialog -s -q4 -b1 "yabdialog is currently running from a bash script ..."
yabdialog -s -q0 -b1 "... but you can use it from any scripting language that can make SYSTEM calls."
yabdialog --colorcontrol yellow
yabdialog -s -q0 -b0 " You can use colors, like yellow ..."
yabdialog --colorcontrol green
yabdialog -s -q0 -b0 "...or green ..."
yabdialog --colorcontrol blue
yabdialog -s -q0 -b0 "...or blue ..."
yabdialog --colorcontrol red
yabdialog -s -q0 -b0 "or red ..."
yabdialog --colorcontrol white
yabdialog -s -q0 -b0 "... or white. I like white. Let's stick with it for a while"
yno=`yabdialog -o -q0 -b2Go on=Tired "Getting tired? Or shall we continue?"`
case $yno in
  cancel)
     yabdialog -s -q0 -b1 "You're tired. I understand. Another time."
     yabdialog --colorcontrol boring
     exit 0
     ;;
  ok)
     yabdialog -s -q0 -b1 "On we go, then! By the way, we're switching back to the standard color."
     ;;
esac
yabdialog --colorcontrol boring
tempdir=`finddir B_COMMON_TEMP_DIRECTORY`
tempfile=$tempdir/yabdialog-demo.tmp
touch $tempfile
echo 0 > $tempfile
yabdialog -p -q1 -b1 "The DEMO countdown ..." $tempfile &
count=1
echo $count > $tempfile
sleep 0.15
option1=n
option2=n
option3=n
option4=n
while true
 do
  yno=`yabdialog -r -q4 -b1  5 "Splash screen" "Clipboard Control" "Text Editor" "Calendar" "Exit Demo" "What would you like to see next?"`
  case $yno in
   1)
    ### Splash Screen demo###
    if [[ "$option1" != "y" ]] ; then 
    	let "count += 1"
    	echo $count > $tempfile
    	sleep 0.25
    	#these sleep statements let the progressbar catch up - may need finetuning on really old machines
    fi
    if [ -e /boot/system/data/artwork/yabdialog.png ]; then
    	DisplayFile=/boot/system/data/artwork/yabdialog.png 
    elif [ -e /boot/home/config/data/artwork/yabdialog.png ]; then
    	DisplayFile=/boot/home/config/data/artwork/yabdialog.png
    else 
    	DisplayFile=/Data/projects/yabdialog/other/yabdialog.png 
    # the last one is for development purposes only
    fi
    yabdialog -g -q2 -b1 $DisplayFile
    if [[ "$option1" != "y" ]] ; then 
    	let "count += 1"
    	echo $count > $tempfile
    	sleep 0.25
    fi
    option1=y
   ;;
   2)
    ###Clipboard control demo###
    if [[ "$option2" != "y" ]] ; then 
    	let "count += 1"
    	echo $count > $tempfile
    	sleep 0.25
    fi
    yabdialog -s -q2 -b1 "Open a file in PE or Stylededit, and put about a tweet's worth of text in the clipboard, then come back and click OK."
    yabdialog -z -q3 -b2⇶
    if [[ "$option2" != "y" ]] ; then 
    	let "count += 1"
    	echo $count > $tempfile
    	sleep 0.25
    fi
    option2=y
    #Yes, I know. I really should put this in a function. It's late and I'm tired, OK?
   ;;
   3)
    ###Text editor demo###
    if [[ "$option3" != "y" ]] ; then 
    	let "count += 1"
    	echo $count > $tempfile
    	sleep 0.25
    fi
    yabdialog -e -q2 -b1 -t "yabdialog lets you create an editbox like this one, with editing functions like cut and paste a right-click away. When you click the button below, the contents of your editor will be returned to the calling routine." "A Text Editor!"
    if [[ "$option3" != "y" ]] ; then 
    	let "count += 1"
    	echo $count > $tempfile
    	sleep 0.25
    fi
    option3=y
   ;;
   4)
    ###Date widget demo###
    if [[ "$option4" != "y" ]] ; then 
    	let "count += 1"
    	echo $count > $tempfile
    	sleep 0.25
    fi
    datepick=`yabdialog -c -q2 -b0 MMDDYYY- "Pick a date"`
    yabdialog -s -q3 -b1 "You picked "$datepick
    if [[ "$option4" != "y" ]] ; then 
    	let "count += 1"
    	echo $count > $tempfile
    	sleep 0.25
    fi
    option4=y
   ;;
   5)
    count=10
    echo $count > $tempfile
    #tell progressbar to exit 
    yabdialog --colorcontrol boring
    #always reset the default color even if it is not supposed to have changed - this setting persists across reboots
    exit 0
   ;;
  esac
 done
